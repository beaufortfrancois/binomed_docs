//
// Génération
//
// dzslides sans embarquer les ressources
// asciidoc <nomfichier>.asciidoc
//
// dzslides en embarquant les ressources
// asciidoc -a data-uri -a linkcss! <nomfichier>.asciidoc
= Bonnes pratiques du développement Android
Jean-François Garreau, SQLI 
v1.0
//:doctitle: Titre de la présentation, sans mise en avant de texte sous différentes formes.
:author: Jean-François Garreau, SQLI
:title: Bonnes pratiques du développement Android
:subtitle: Revue des bonnes pratiques et de quelques ui patterns
:description: Revue des bonnes pratiques et de quelques ui patterns
:copyright: Copyright 2013 SQLI
//:website: TBD
//:slidesurl: TBD
// à remplacer par le chemin relatif de notre path d'image
//:imagesdir: 
:backend: dzslides
:linkcss: true
:dzslides-style: sqli
:dzslides-transition: fade
:dzslides-highlight: github
:dzslides-autoplay: 0
// disable syntax highlighting unless turned on explicitly
:syntax: no-highlight
:sqli-custom-css: css/custom.css


//    _____   _   _   _______   _____     ____  
//   |_   _| | \ | | |__   __| |  __ \   / __ \ 
//     | |   |  \| |    | |    | |__) | | |  | |
//     | |   | . ` |    | |    |  _  /  | |  | |
//    _| |_  | |\  |    | |    | | \ \  | |__| |
//   |_____| |_| \_|    |_|    |_|  \_\  \____/ 
//                                              
//        

+++++++++++++++++++++++
<script src="scripts/jquery-1.8.3.min.js"></script>
<script src="scripts/iscroll-lite.js"></script>
<!--<script src="scripts/jquery.mobile-1.3.0.min.js"></script>-->
+++++++++++++++++++++++

== Qui suis-je ?

===  Jean-François GARREAU

image::images/jf.png[role="float-left"]


* Consultant IT chez SQLI
 +
 +
* Développeur Android à mes heures perdues
 +
 +
* Un des membres fondateur du GDG Nantes
 +
 +

* Créateur de CineShowTime  image:images/cineshowtime.png[width="50"]
 +
 +

image::images/twitter-icon.png[width="50", role="float-left"]

@gdgnantes / @binomed / @uncle_bens1
 +
 +
 +

image::images/google-Plus-icon.png[width="50",role="float-left"]

http://gplus.to/jefBinomed



//     _____    ____    __  __   __  __              _____   _____    ______ 
//    / ____|  / __ \  |  \/  | |  \/  |     /\     |_   _| |  __ \  |  ____|
//   | (___   | |  | | | \  / | | \  / |    /  \      | |   | |__) | | |__   
//    \___ \  | |  | | | |\/| | | |\/| |   / /\ \     | |   |  _  /  |  __|  
//    ____) | | |__| | | |  | | | |  | |  / ____ \   _| |_  | | \ \  | |____ 
//   |_____/   \____/  |_|  |_| |_|  |_| /_/    \_\ |_____| |_|  \_\ |______|
//                                                                           
//      


== Sommaire


* Revoir son Java

* Ménager la mémoire

* Ui patterns

* Bonnes pratiques

* Les librairies
 


//         _             __      __           
//        | |     /\     \ \    / /     /\    
//        | |    /  \     \ \  / /     /  \   
//    _   | |   / /\ \     \ \/ /     / /\ \  
//   | |__| |  / ____ \     \  /     / ____ \ 
//    \____/  /_/    \_\     \/     /_/    \_\
//                                            
//                      

[role="intro fond_2"]
== Revoir son Java

image::images/LogoJava.png[role="icone"]

[NOTES]
====
Tout ce qu'on croit savoir est faux ;)
====


== Oublions le Java


image::images/forget_java.jpg[role="middle"]


== AutoBoxing et types primitifs

* AutoBoxing, c'est quoi ça ?

** C'est créer des objets à partir de types primitifs :
[{stepwise}]
--
[syntax="java"]
----
Integer result = 1;
for (int i = 0; i < 10; i++){
 result += i;
}
return result;
----

Reviens à : 


[syntax="java"]
----
Integer result = new Integer(1);
for (int i = 0; i < 10; i++){
 result = new Integer(i + result.intValue());
}
return result.intValue();
----
--

== Types primitifs

Il est donc préférable d'utiliser au maximum des types primitifs !

Attention cependant dans l'utilisation des types primitifs pour les nombres : 

[{middle}]
Les entiers sont en caches de -128 à 127

== SparseArray

Sorte de HashMap avec des clés "entiers" dont l'ojbectif est d'éviter l'auto boxing

[syntax="java"]
----
HashMap<Integer,String> map = new HashMap<Integer,String>();
map.put(550,"Echo");
map.put(551,"Echo");
map.get(550);
----

donne 

[{stepwise}]
--
[syntax="java"]
----
HashMap<Integer,String> map = new HashMap<Integer,String>();
map.put(new Integer(550),"Echo");
map.put(new Integer(551),"Echo");
map.get(new Integer(550));
----

avec les sparseArray : pas d'auotboxing ! 


[syntax="java"]
----
SparseArray<String> map = new SparseArray<String>();
map.put(550,"Echo");
map.put(551,"Echo");
map.get(550);
----
--

== Préférons les implémentations aux interfaces

* Avec Android, il est bon de ménager l'appareil dès qu'on le peut 

	Utilisation des implémentatins dans la déclaration plutôt que les interfaces.

[{stepwise}]
--
[syntax="java"]
----
List<String> list = new ArrayList<String>();
----

est à remplacer par 


[syntax="java"]
----
ArrayList<String> list = new ArrayList<String>();
----
--

[NOTES]
====
On fait ça pour ménager la compilation
====


//    __  __   ______   __  __    ____    _____   _____    ______ 
//   |  \/  | |  ____| |  \/  |  / __ \  |_   _| |  __ \  |  ____|
//   | \  / | | |__    | \  / | | |  | |   | |   | |__) | | |__   
//   | |\/| | |  __|   | |\/| | | |  | |   | |   |  _  /  |  __|  
//   | |  | | | |____  | |  | | | |__| |  _| |_  | | \ \  | |____ 
//   |_|  |_| |______| |_|  |_|  \____/  |_____| |_|  \_\ |______|
//                                                                
//  

[role="intro fond_2"]
== Ménageons la mémoire

=== Moins y en a mieux c'est

image::images/cofee_overload.jpg[role="icone"]


== Objectif : Instanciations minis ! 

=== Comment procédons nous pour faire le moins d'instanciations ?

* Nous sommes sur des téléphones, la ram n'est pas une ressources forcément très présente.

* Vous n'êtes pas la seule applications ! 

* Minimisons donc notre impact sur cette dernière.

** Variables statiques

** Réutilisation d'objets

** Gestion des chaines de caratères

** Layout allégé ! 

** Gestion de l'autoboxing (cf précédement)


== Préférons les variables statiques

=== Quand cela est possible bien entendu

* L'utilisation de variables statiques permet d'économiser des instanciations.

[syntax="java"]
----
public long doSomeStuff(int left, int top, int right, int bottom){
	return stuff(new Rect(left, top, right, bottom));
} 

public abstract long stuff(Rect rect);
----

[{stepwise}]
--
On peut faire mieux ! 

[syntax="java"]
----
private static final Rect rect = new Rect();

public long doSomeStuff(int left, int top, int right, int bottom){
	rect.set(left, top, right, bottom);
	return stuff(rect);
} 

public abstract long stuff(Rect rect);
----
--

== Réutilisons des objets !

[syntax="java"]
----
private static final int  MSG_ANIMATION_FRAME = 0xcafe;

public void sendMessage(Handler handler, Object userInfo){
	final Message message = new Message();
	message.what = MSG_ANIMATION_FRAME;
	message.obj = userInfo;

	handler.sendMessage(message);
} 

----


Peut être remplacé par 

[syntax="java"]
----
private static final int  MSG_ANIMATION_FRAME = 0xcafe;

public void sendMessage(Handler handler, Object userInfo){
	final Message message = Message.obtain();
	message.what = MSG_ANIMATION_FRAME;
	message.obj = userInfo;

	handler.sendMessage(message);
} 
----

* voici un article très intéressant sur la mise en place de ce design pattern : http://www.devahead.com/blog/2011/12/recycling-objects-in-android-with-an-object-pool-to-avoid-garbage-collection/?utm_source=%23AndroidDev+Weekly&utm_campaign=65486bb85d-NEWSLETTER&utm_medium=email[Design Pattern Object Pool]

== ViewHolder

=== Réutilisation de vue sur les listView

* pattern de réutilisabilité des vues 

PAS BIEN ! 

[syntax="java"]
----
public View getView(int position, View convertView, ViewGroup parent) {
    LayoutInflater inflater = (LayoutInflater) context
        .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    View rowView = inflater.inflate(R.layout.rowlayout, parent, false);
    TextView textView = (TextView) rowView.findViewById(R.id.label);
    ImageView imageView = (ImageView) rowView.findViewById(R.id.icon);
    textView.setText(values[position]);
    // Change the icon for Windows and iPhone
    String s = values[position];
    if (s.startsWith("iPhone")) {
      imageView.setImageResource(R.drawable.no);
    } else {
      imageView.setImageResource(R.drawable.ok);
    }

    return rowView;
  }
----

== ViewHolder

=== Réutilisation de vue sur les listView

BIEN ! 

[syntax="java"]
----
public View getView(int position, View convertView, ViewGroup parent) {
	View rowView = null;

	if (convertView == null){
	    LayoutInflater inflater = (LayoutInflater) context
	        .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	    rowView = inflater.inflate(R.layout.rowlayout, parent, false);
	}else{
		rowView = convertView;
	}
    TextView textView = (TextView) rowView.findViewById(R.id.label);
    ImageView imageView = (ImageView) rowView.findViewById(R.id.icon);
    textView.setText(values[position]);
    // Change the icon for Windows and iPhone
    String s = values[position];
    if (s.startsWith("iPhone")) {
      imageView.setImageResource(R.drawable.no);
    } else {
      imageView.setImageResource(R.drawable.ok);
    }

    return rowView;
  }
----


== ViewHolder

=== Pourquoi donc ?

image::images/list_view_explain.jpg[{middle}, height="500px"]

== Gestion des chaines de caratères

* Préférez le StringBuffer aux concaténations de chaines !

* Pensez aussi à référencer 1 fois les chaines de caratères de vos vues si elles sont statiques. Utile pour le listView, ...

== Layout allégés

* Un arbre de layout trop compliqué va instancier beaucoup d'objets ! 

** Préférez le GridLayout (disponible depuis 10 mais rétrocompatible jusqu'à 7)

** Ou utilisez des Relatives Layouts

** N'hésitez pas non plus à mutualiser vos layouts ! 

  L'utilisation des balises merges et includes se révèle fort utile.

[NOTES]
====
Utiliser les balises merges pour réutiliser des layouts
====

//    _    _   _____     _____               _______   _______   ______   _____    _   _ 
//   | |  | | |_   _|   |  __ \      /\     |__   __| |__   __| |  ____| |  __ \  | \ | |
//   | |  | |   | |     | |__) |    /  \       | |       | |    | |__    | |__) | |  \| |
//   | |  | |   | |     |  ___/    / /\ \      | |       | |    |  __|   |  _  /  | . ` |
//   | |__| |  _| |_    | |       / ____ \     | |       | |    | |____  | | \ \  | |\  |
//    \____/  |_____|   |_|      /_/    \_\    |_|       |_|    |______| |_|  \_\ |_| \_|
//                                                                                       
// 

[role="intro fond_2"]
== Ui patterns

image::images/ActionBar2.png[role="icone"]

== Action Bar

+++++++++++++++++++++++
<div class="nexus4">
  <div id="ab_1">
    <a id="ab_contact" href="#" ></a>
  </div>
  <div id="ab_2">
    <a id="ab_click" href="#"></a>
  </div>
  <div id="ab_circle"></div>
</div>

 <script type="text/javascript">
  jQuery(function() {
      jQuery("#ab_2").hide();
      jQuery("#ab_contact").on("click", function(){ 
        jQuery("#ab_circle").hide();
        jQuery("#ab_1").hide();
        jQuery("#ab_2").show();
        return false;
      });
      jQuery("#ab_click").on("click", function(){ 
        jQuery("#ab_circle").hide();
        jQuery("#ab_2").hide();
        jQuery("#ab_1").show();
        return false;
      });
                   
  });
</script>
+++++++++++++++++++++++

//image::images/action_bar.jpg[{middle},height="400px"]

== DashBoard

//image::images/dashboard.jpg[{middle},height="400px"]

+++++++++++++++++++++++
<div class="nexus4">
  <div id="dashboard">
    <a id="db_maps" href="#" >Maps</a>
    <a id="db_galery" href="#" >Gallery</a>
    <a id="db_calendar" href="#" >Calendar</a>
    <a id="db_gmail" href="#" >Gmail</a>
    <div id="toast_maps"></div>
    <div id="toast_galery"></div>
    <div id="toast_calendar"></div>
    <div id="toast_gmail"></div>
  </div>
  
</div>

 <script type="text/javascript">
  jQuery(function() {
      jQuery('#toast_maps').hide();
      jQuery('#toast_galery').hide();
      jQuery('#toast_calendar').hide();
      jQuery('#toast_gmail').hide();
      jQuery("#db_maps").on("click", function(){ 
        jQuery("#toast_maps").show();
        setTimeout(function(){
          jQuery('#toast_maps').hide("slow");
        },1000);
        return false;
      });   
      jQuery("#db_galery").on("click", function(){ 
        jQuery("#toast_galery").show();
        setTimeout(function(){
          jQuery('#toast_galery').hide("slow");
        },1000);
        return false;
      });   
      jQuery("#db_calendar").on("click", function(){ 
        jQuery("#toast_calendar").show();
        setTimeout(function(){
          jQuery('#toast_calendar').hide("slow");
        },1000);
        return false;
      });   
      jQuery("#db_gmail").on("click", function(){ 
        jQuery("#toast_gmail").show();
        setTimeout(function(){
          jQuery('#toast_gmail').hide("slow");
        },1000);
        return false;
      });     
                   
  });
</script>
+++++++++++++++++++++++

== Sliding Menu

// à regarder : http://srobbin.com/jquery-plugins/pageslide/

+++++++++++++++++++++++
<div id="sliding" class="nexus4 phone">  
  <iframe id="slidingmenu" src="http://www.aldomatic.com/jqm/fb-menu-style/" frameborder="0" allowfullscreen></iframe>
</div>
<img id="imgSliding" src="images/sliding_menu.png" height="400px" class="middle"></img>
<script type="text/javascript">
  jQuery(function() {
    if( jQuery.browser.webkit){
      jQuery('#imgSliding').hide();
    }else{
      jQuery('#sliding').hide();
    }
  });
 </script>
+++++++++++++++++++++++

== PullToRefresh

// Voir avec IScroll

+++++++++++++++++++++++
<div id="pull" class="nexus4 phone">  

  <div id="pullwrapper">
    <div id="wrapper" >
      <div id="scroller">
        <div id="pullDown">
            <span class="pullDownIcon"></span><span class="pullDownLabel">Pull down to refresh...</span>
        </div>
        <ul id="thelist">
            <li>Pretty row 1</li>
            <li>Pretty row 2</li>
            <li>Pretty row 3</li>
            <li>Pretty row 4</li>
            <li>Pretty row 5</li>
            <li>Pretty row 6</li>
            <li>Pretty row 7</li>
            <li>Pretty row 8</li>
            <li>Pretty row 9</li>
            <li>Pretty row 10</li>
            <li>Pretty row 11</li>
            <li>Pretty row 12</li>
            <li>Pretty row 13</li>
            <li>Pretty row 14</li>
            <li>Pretty row 15</li>
            <li>Pretty row 16</li>
            <li>Pretty row 17</li>
            
        </ul>
      </div>
    </div>
  </div>
  <div class="nexus4header"></div>
</div>
<script type="text/javascript">

var myScroll,
  pullDownEl, pullDownOffset,
  generatedCount = 0;

function pullDownAction () {
  setTimeout(function () {  // <-- Simulate network congestion, remove setTimeout from production!
    var el, li, i;
    el = document.getElementById('thelist');

    for (i=0; i<3; i++) {
      li = document.createElement('li');
      li.innerText = 'Generated row ' + (++generatedCount);
      el.insertBefore(li, el.childNodes[0]);
    }
    
    myScroll.refresh();   // Remember to refresh when contents are loaded (ie: on ajax completion)
  }, 1000); // <-- Simulate network congestion, remove setTimeout from production!
}

function loaded() {
  pullDownEl = document.getElementById('pullDown');
  pullDownOffset = pullDownEl.offsetHeight;
 
  myScroll = new iScroll('wrapper', {
    useTransition: true,
    topOffset: pullDownOffset,
    onRefresh: function () {
      if (pullDownEl.className.match('loading')) {
        pullDownEl.className = '';
        pullDownEl.querySelector('.pullDownLabel').innerHTML = 'Pull down to refresh...';
      }
    },
    onScrollMove: function () {
      if (this.y > 5 && !pullDownEl.className.match('flip')) {
        pullDownEl.className = 'flip';
        pullDownEl.querySelector('.pullDownLabel').innerHTML = 'Release to refresh...';
        this.minScrollY = 0;
      } else if (this.y < 5 && pullDownEl.className.match('flip')) {
        pullDownEl.className = '';
        pullDownEl.querySelector('.pullDownLabel').innerHTML = 'Pull down to refresh...';
        this.minScrollY = -pullDownOffset;
      } 
    },
    onScrollEnd: function () {
      if (pullDownEl.className.match('flip')) {
        pullDownEl.className = 'loading';
        pullDownEl.querySelector('.pullDownLabel').innerHTML = 'Loading...';        
        pullDownAction(); // Execute custom function (ajax call?)
      } 
    }
  });
  
  setTimeout(function () { document.getElementById('wrapper').style.left = '0'; }, 800);
}

document.addEventListener('touchmove', function (e) { e.preventDefault(); }, false);

document.addEventListener('DOMContentLoaded', function () { setTimeout(loaded, 200); }, false);
</script>
<!--
<div id="pull" class="nexus4 phone">  
  <iframe id="pulltorefresh" src="http://cubiq.org/dropbox/iscroll4/examples/pull-to-refresh/" frameborder="0" allowfullscreen></iframe>
</div>
<img id="imgPull" src="images/Pulldowntorefresh.png" height="500px" class="middle"></img>
<script type="text/javascript">
  jQuery(function() {
    if( jQuery.browser.webkit){
      jQuery('#imgPull').hide();
    }else{
      jQuery('#pull').hide();
    }
  });
 </script>
 -->
+++++++++++++++++++++++
//image::images/Pulldowntorefresh.png[{middle},height="500px"]

== QuickActions

//image::images/QuickActions.png[{middle}]

+++++++++++++++++++++++
<div class="nexus4">
  <div id="quickAction">
    <a id="quick_contact" href="#" ></a>    
  </div>
  <div id="quickAction_actions">
    <a id="quick_clicks" href="#" ></a>    
  </div>
  
</div>

 <script type="text/javascript">
  jQuery(function() {
      jQuery('#quickAction_actions').hide();
      jQuery("#quick_contact").on("click", function(){ 
        jQuery("#quickAction_actions").show("slow");
        return false;
      });   
      jQuery("#quick_clicks").on("click", function(){ 
        jQuery("#quickAction_actions").hide("slow");
        return false;
      });   
                   
  });
</script>
+++++++++++++++++++++++

== ViewPager

+++++++++++++++++++++++
<div id="viewPage" class="nexus4 phone">  
  <iframe id="viewpager" src="http://mobilegwt.appspot.com/showcase/#CarouselPlace:" frameborder="0" allowfullscreen></iframe>
</div>
<img id="imgViewPager" src="images/Horizontalscrolling2.png" class="middle"></img>
<script type="text/javascript">
  jQuery(function() {
    if( jQuery.browser.webkit){
      jQuery('#imgViewPager').hide();
    }else{
      jQuery('#viewpager').hide();
    }
  });
 </script>
+++++++++++++++++++++++
//image::images/Horizontalscrolling2.png[{middle}]


== Fragments


+++++++++++++++++++++++
<div id="fragment_phone" class="nexus4 phone">  
  <div id="fragment_phone_1"></div>
  <div id="fragment_phone_2"></div>
  <a id="fragment_tab_main" href="#"></a>
  <a id="fragment_tab_fav" href="#"></a>
</div>
<div id="fragment_tablet" class="nexus10 phone">  
  <div id="fragment_tablet_1"></div>
</div>
<a id="fragmentchangeViewPhone" href="#"></a>
<a id="fragmentchangeViewTablet" href="#"></a>
<script type="text/javascript">
  jQuery(function() {
    jQuery("#fragment_tablet").hide();
    jQuery("#fragment_phone_2").hide();
    jQuery("#fragmentchangeViewPhone").hide();
    jQuery("#fragmentchangeViewPhone").on("click", function(){ 
        jQuery("#fragmentchangeViewPhone").hide();
        jQuery("#fragmentchangeViewTablet").show();
        jQuery("#fragment_tablet").hide();
        jQuery("#fragment_phone_2").hide();
        jQuery("#fragment_phone").show();
        jQuery("#fragment_phone_1").show();        
        return false;
    });     
    jQuery("#fragmentchangeViewTablet").on("click", function(){ 
        jQuery("#fragmentchangeViewPhone").show();
        jQuery("#fragmentchangeViewTablet").hide();
        jQuery("#fragment_phone").hide();
        jQuery("#fragment_tablet").show();
        return false;
    });
    jQuery("#fragment_tab_main").on("click", function(){ 
        jQuery("#fragment_phone_2").hide();
        jQuery("#fragment_phone_1").show();
        return false;
    });
    jQuery("#fragment_tab_fav").on("click", function(){ 
        jQuery("#fragment_phone_1").hide();
        jQuery("#fragment_phone_2").show();
        return false;
    });
  });
 </script>
+++++++++++++++++++++++


//    ____     ____    _   _   _   _   ______    _____     _____    _____               _______   _____    ____    _    _   ______    _____ 
//   |  _ \   / __ \  | \ | | | \ | | |  ____|  / ____|   |  __ \  |  __ \      /\     |__   __| |_   _|  / __ \  | |  | | |  ____|  / ____|
//   | |_) | | |  | | |  \| | |  \| | | |__    | (___     | |__) | | |__) |    /  \       | |      | |   | |  | | | |  | | | |__    | (___  
//   |  _ <  | |  | | | . ` | | . ` | |  __|    \___ \    |  ___/  |  _  /    / /\ \      | |      | |   | |  | | | |  | | |  __|    \___ \ 
//   | |_) | | |__| | | |\  | | |\  | | |____   ____) |   | |      | | \ \   / ____ \     | |     _| |_  | |__| | | |__| | | |____   ____) |
//   |____/   \____/  |_| \_| |_| \_| |______| |_____/    |_|      |_|  \_\ /_/    \_\    |_|    |_____|  \___\_\  \____/  |______| |_____/ 
//                                                                                                                                          
//     

[role="intro fond_2"]
== Bonnes Pratiques

image::images/yoda.jpg[role="icone"]

== Optimisons la bande passante ! 

Il vaut mieux faire n petits téléchargement ou 1 gros ?

image::images/cookie_model.png[width="800px"]

== Optimisons la bande passante

[{statement}]
Un seul ! 


[{middle}]
http://www.youtube.com/watch?v=PwC1OlJo5VM[Reto Meier Google IO 2012 : à partir de 20:00]

[NOTES]
====
On passe les détails mais ça économise la batterie avec les ouvertures de connexions.
====


== Optimisions la bande passante

* De simples actions suffises à améliorer la consomation de bande passante : 

** Zipper ces résultats

** Préferer le json au xml

** Mettre en cache ses résultats de façon à eviter de devoir les rechercher en permanance !

  Utilisation d'une base de données.

== Améliorons l'expérience utilisateur 

=== N'attendons pas qu'il nous demande l'information

* Utilisation des Broadcastreciever !

** Application beaucoup plus réactive

** L'utilisateur a une sensation de rapidité !

a utilser bien sur si cela est possible ;)

== Améliorons l'expérience utilisateur

* Règle 1 : 

[{stepwise}]
--
  Ne pas bloquer le thread UI

--
* Règle 2 : 

[{stepwise}]
--
  Ne pas bloquer le thread UI

* Ok mais Comment ?
--

== Ne pas bloquer l'ui Thread

* Plusieurs choses sont à disposition

** AsyncTask

** Services


== Gagnons en place

Nous sommes sur des réseaux téléphoniques pas toujours fournis en 4G, donc il faut ménager le poids de nos applications !

* Draw9Patch : économie d'image

image::images/d9p.png[height="400px"]

[NOTES]
====
Ne pas hésiter non plus à créer programatiquement des drawables
====


//    _        _____   ____    _____               _____   _____    _____   ______    _____ 
//   | |      |_   _| |  _ \  |  __ \      /\     |_   _| |  __ \  |_   _| |  ____|  / ____|
//   | |        | |   | |_) | | |__) |    /  \      | |   | |__) |   | |   | |__    | (___  
//   | |        | |   |  _ <  |  _  /    / /\ \     | |   |  _  /    | |   |  __|    \___ \ 
//   | |____   _| |_  | |_) | | | \ \   / ____ \   _| |_  | | \ \   _| |_  | |____   ____) |
//   |______| |_____| |____/  |_|  \_\ /_/    \_\ |_____| |_|  \_\ |_____| |______| |_____/ 
//                                                                                          
//  

[role="intro fond_2"]
== Librairies

=== Quoi utiliser et pourquoi ?

image::images/android_lib.jpg[role="icone"]

== Pourquoi ?

image::images/meme_enjeux.jpg[{middle}]

== Librairies Google

* SupportLibrarie

* Analytics

* PlayService

* GCM

* AddMob

* ...

[NOTES]
====
Dans playservice, on va trouver des choses commes mapssV2, la sécurisation des apps
====

== ActionBarSherlock

image::images/abs.png[role="library"]

* Pourquoi ?

** Mise à disposition de l'action bar depuis Donut ! 

** Utilisation des méthodes et objets standards android !

== ACRA

image::images/acra.png[role="library"]

* Pourquoi ?

** Report de crash automatique 

== RoboSpice

image::images/robospice.png[role="library"]

* Pourquoi ?

** Gestion très propres des services

** Gestion d'un cache de requêtes !

** Relativement simple d'utilisation

== Injections de dépendances


image::images/android_annotations.png[role="float-right library"]
* Android Annotations

**  Injection à la compilation

image::images/roboguice.png[role="float-right library"]
* RoboGuice

** Injection à l'éxécution

== Les librairies ça à l'air simple !

image::images/meme_solutions.jpg[{middle}]


[NOTES]
====
Oui mais pas trop en fait... car pb d'héritage
pb avec Maven, ...
====



//     ____    _    _   ______    _____   _______   _____    ____    _   _    _____ 
//    / __ \  | |  | | |  ____|  / ____| |__   __| |_   _|  / __ \  | \ | |  / ____|
//   | |  | | | |  | | | |__    | (___      | |      | |   | |  | | |  \| | | (___  
//   | |  | | | |  | | |  __|    \___ \     | |      | |   | |  | | | . ` |  \___ \ 
//   | |__| | | |__| | | |____   ____) |    | |     _| |_  | |__| | | |\  |  ____) |
//    \___\_\  \____/  |______| |_____/     |_|    |_____|  \____/  |_| \_| |_____/ 
//                                                                                  
//   

[role="intro fond_fin"]
== Questions

image::images/andquestionsag.png[role="icone"]
