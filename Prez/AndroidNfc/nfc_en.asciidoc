//
// Génération
//
// dzslides sans embarquer les ressources
// asciidoc <nomfichier>.asciidoc
//
// dzslides en embarquant les ressources
// asciidoc -a data-uri -a linkcss! <nomfichier>.asciidoc
= NFC & Android
Jean-François Garreau, GDG Nantes, SQLI 
v1.0
//:doctitle: Titre de la présentation, sans mise en avant de texte sous différentes formes.
:author: Jean-François Garreau, GDG Nantes, SQLI
:title: NFC & Android
:subtitle: New Future Communication
:description: NFC presentation on Android
:copyright: Copyright 2013 SQLI
//:website: TBD
//:slidesurl: TBD
// à remplacer par le chemin relatif de notre path d'image
//:imagesdir: 
:backend: dzslides
:linkcss: true
:dzslides-style: gdg
:dzslides-transition: fade
:dzslides-highlight: googlecode
:dzslides-autoplay: 0
// disable syntax highlighting unless turned on explicitly
:syntax: no-highlight
:sqli-custom-css: css/custom.css


//    _____   _   _   _______   _____     ____  
//   |_   _| | \ | | |__   __| |  __ \   / __ \ 
//     | |   |  \| |    | |    | |__) | | |  | |
//     | |   | . ` |    | |    |  _  /  | |  | |
//    _| |_  | |\  |    | |    | | \ \  | |__| |
//   |_____| |_| \_|    |_|    |_|  \_\  \____/ 
//                                              
//        


== Who Am I ?

===  Jean-François GARREAU

image::images/jf.png[role="float-left"]


* IT Software ingeneer for SQLI
 +
 +
* Android developer during my free times
 +
 +
* GDG Nantes leader and founder
 +
 +

* CineShowTime creator  image:images/cineshowtime.png[width="50"]
 +
 +

image::images/twitter-icon.png[width="50", role="float-left"]

@gdgnantes / @binomed / @uncle_bens1
 +
 +
 +

image::images/google-Plus-icon.png[width="50",role="float-left"]

http://gplus.to/jefBinomed



//     _____    ____    __  __   __  __              _____   _____    ______ 
//    / ____|  / __ \  |  \/  | |  \/  |     /\     |_   _| |  __ \  |  ____|
//   | (___   | |  | | | \  / | | \  / |    /  \      | |   | |__) | | |__   
//    \___ \  | |  | | | |\/| | | |\/| |   / /\ \     | |   |  _  /  |  __|  
//    ____) | | |__| | | |  | | | |  | |  / ____ \   _| |_  | | \ \  | |____ 
//   |_____/   \____/  |_|  |_| |_|  |_| /_/    \_\ |_____| |_|  \_\ |______|
//                                                                           
//      


== Agenda

What is NFC ?

History
	
	Little informations about NFC

Standards
	
	Theories and associated standards

Uses
	
	What can we do with NFC

Demos
	
	A litle demo

Implementation
	
	Concretly, how do I code that ?

Nfa : Nfc For Android

	Presentation of the library

Conclusion

Links

//    _   _   ______    _____     ___  
//   | \ | | |  ____|  / ____|   |__ \ 
//   |  \| | | |__    | |           ) |
//   | . ` | |  __|   | |          / / 
//   | |\  | | |      | |____     |_|  
//   |_| \_| |_|       \_____|    (_)  
//                                     
//       

[role="intro"]
== What is NFC ?

image::images/nfc_logo.jpg[role="icone"]

== What is NFC ?

image::images/nfc_logo.jpg[role="float-right", width="100px"]
*NFC = Near Field Communication*
 +
 +

image::images/nfc_card.jpg[role="float-right", width="100px"]
*Interaction / physical selection*

* We approach the phone from a Tag to set off the interaction
 +
 +
*Securised*

* User needed
 +
 +
*Defined by NFC Forum.*
 +
 +
Extension du RFID => Compatibilité de lecture
 +
 + 
First destined to phones

[NOTES]
====
Parler du champ magnétique qui es autoalimenté
====

//    ______   _______              _______                _____    _______ 
//   |  ____| |__   __|     /\     |__   __|       /\     |  __ \  |__   __|
//   | |__       | |       /  \       | |         /  \    | |__) |    | |   
//   |  __|      | |      / /\ \      | |        / /\ \   |  _  /     | |   
//   | |____     | |     / ____ \     | |       / ____ \  | | \ \     | |   
//   |______|    |_|    /_/    \_\    |_|      /_/    \_\ |_|  \_\    |_|   
//                                                                          
//  

[role="intro"]
== History

image::images/nfc_card.jpg[role="icone"]

== History
*2004*

	Nokia, Philips and Sony create the NFC Forum (today 140 companies). The mission is to create and garenty a uniform protocol and methods between differents actors.

+++++++++
<br>
+++++++++

*2006*
	
	 First NFC Tags specifications
	 
	 First NFC Phone  : Nokia 6131

+++++++++
<br>
+++++++++

*2009*
	
	Add of P2P protocol for NFC between to devices (don't exists with RFID). 
 

+++++++++
<br>
+++++++++
*2010*
	
	First NFC Android phone : Samsung Nexus S  with a dedicated API

== History
=== Technologies : RFID / SmartCard
*NFC is based on RFID = Radio Frequency Identification*

//	La distance entre le lecteur et le tag peut être de plusieurs dizaines de mètres (pour le RFID)
	Tag / reader distance = up to 10 meters !


+++++++++
<br>
+++++++++
*Experienced Technologie : first patent in 1983*

	Use 13,56MHz frequency for communications < 1m
	
	Standard ISO 18092


+++++++++
<br>
+++++++++
*SmartCard :*

	NFC = extension of SmartCard, just a standardisation of smartcard throught RFID communication
	
	=> Standard ISO 14443-4 is the standrad for a non contact use of SmartCard

[NOTES]
====
RFID : Distance de pls mètres

-> Fréquence 13.56Mhz pour com < 1m

NFC pour SmartCard = NFC standard de smartCard pour la communication RFID
	
====

//    _   _    ____    _____    __  __   ______    _____ 
//   | \ | |  / __ \  |  __ \  |  \/  | |  ____|  / ____|
//   |  \| | | |  | | | |__) | | \  / | | |__    | (___  
//   | . ` | | |  | | |  _  /  | |\/| | |  __|    \___ \ 
//   | |\  | | |__| | | | \ \  | |  | | | |____   ____) |
//   |_| \_|  \____/  |_|  \_\ |_|  |_| |______| |_____/ 
//                                                       
//   

[role="intro"]
== Standards

image::images/iso-logo.png[role="icone"]

== Standards
=== Mode
*3 communications modes :*

++++++
<br>
++++++

image::images/smart_card_nfc.jpg[role="float-left", width="150px"]
Card emulation
	
++++++
<br>
<br>
<br>
++++++

image::images/social-nfc-tags.png[role="float-left", width="150px"]
Read / Write
	
++++++
<br>
<br>
<br>
++++++

image::images/nfc_p2p.jpg[role="float-left", width="150px"]
Peer to Peer
	
++++++
<br>
<br>
<br>
++++++


[NOTES]
====
Normes Régies par le NFC Forum !

Emulation= Simulation interface carte à puce

Lecture / Ecriture : Tag

Pair à Pair : 2 Appareils
====

== Standards
=== Communication
*Standard ISO 14443*

* Rates between 106 et 424 Kps

* Communication lower to 10cm. (realy 3/4cm)

* Hal duplex or full duplex

*2 types of ISO 14443 :*

* ISO 14443 A (NfcA in Android)
	
* ISO 14443 B (NfcB in Android)
	


[NOTES]
====
Half-duplex : Communication dans les 2 sens mais chacun son tour. FullDuplex : Com 2 sens simultanément

NfcA : Modulation sur 100% -1 pour 0 après 1, 0 pour 0 après 0, 1 pour 1 après 0 ou 1

NfcB : Modulation sur 10%
====

== Standards
=== Others standards tolerated by Android
*Felica (NfcF in Android)*

+++++++++
<br>
+++++++++
*ISO 15693 (NfcV in Android)*


[NOTES]
====
Felica : Pas ISO mais NFC-Forum : Japon

15693 : ISO mais pas NFC-Forum
====

== Standards
=== Tag types of the NFC Forum
*The NFC forum defined 4 types of tags*

	NfcA = Type 1 / 2 / 4
	
	NfcB = Type 4
	
	NfcF = Type 3


[options="header"]
|====================
|Type | Available memory  | Communication Type | Possible Tags
|Type 1 | 96bits -> 2Kbits | ISO 14443-A | Topaz
|Type 2 | 48bits -> 2Kbits | ISO 14443-A | Mifare Ultra Light
|Type 3 | ? -> 1Mbits | Felica | Felica
|Type 4 | ? -> 32Kbits | ISO 14443 A or B | DesFire ISO 14443-A
|====================


== Standards
=== NDEF : NFC Data Exchange Format

+++++++++
<br>
+++++++++
*This format contains a header that helps us to understand the content of the TAG, or block it*
+++++++++
<br>
+++++++++
*One NDEF message = 1 or N Ndef records*
+++++++++
<br>
+++++++++
*Predifined types*

	Pure texte, URI, …

[NOTES]
====
Format d'échange standard

But des types = Gain de place
====

== Standards
=== NDEF : NFC Data Exchange Format

image::images/Ndefrecod.png[role="middle"]

++++++
<br>
++++++

Header = informations about the tag

	Place in message
	
	Type
	
	Size

	Payload = Data

== Standards
=== NDEF - Informations about the message

++++++
<div id="ndef_header" ></div>
++++++

image::images/Ndeffullrecod.png[role="float-left stretch-y"]

* *MB (Message Begin)*
	
* *ME (Message End)*
	
* *CF (Chunk Flag)* : let you know if message is truncated
	
* *SR (Short Reccord)* : let you know if message is short (1octet)
	
* *IL (ID Length)* : let you know if there is an identifier

* *TNF (Type Name Format)* : data type

[NOTES]
====
MB = 1 => début de message | ME = 1 => Message fini dans le message

IL : si à 1 : ID Length et  ID devront être remplis

====

== Standards
=== NDEF - TNF (data type)

* *0x00*  Empty : Empty record
* *0x01* Well-Known Type (WKT) : Type defined by NFC Forum
* *0x02* : MIME Type
* *0x03* Absolute Uri
* *0x04* External
* *0x05* Unkown Type
* *0x06* Unchanged Type (use for truncated messages)
* *0x07* Reserved for futur use

== Standards
=== NDEF - Type Length

++++++
<div id="ndef_length_type" ></div>
++++++

image::images/Ndeffullrecod.png[role="float-left stretch-y"]

	Type length in the payload :  in Octet

[NOTES]
====
Détail du type contenu dans le message : lié au TNF. TNF = premier type, Vrai type dans le payload ! => taille à préciser

====

== Standards
=== NDEF - Data length

++++++
<div id="ndef_length_payload" ></div>
++++++

image::images/Ndeffullrecod.png[role="float-left stretch-y"]

	Defines data length in octet. This field could contains between 1 or 4 octets 

[NOTES]
====
La taille varie à cause du champ SR (Short Record)

====

== Standards
=== NDEF - Type & Id

++++++
<div id="ndef_type_id" ></div>
++++++

image::images/Ndeffullrecod.png[role="float-left stretch-y"]

* *Type* always present : Payload Type
* *ID* dependant to IL field : record Id
	

== Standards
=== NDEF - Message content

++++++
<div id="ndef_payload" ></div>
++++++

image::images/Ndeffullrecod.png[role="float-left stretch-y"]


== Standards
=== Well Known Types

Octet *Type*

* U (0x55) for uris
* T (0x54) for text
* Sp (0x53,0x70) for smartPoster (type length is 2)

[NOTES]
====
Sert à gagner encore plus de bits

====

== Standards
=== Well Known Types

* *URIs*, 1st bit = identification bit
	
	0x00 : no prefix
	
	0x01 : http://www.
		
	0x03 : http://
		
	0x05 : tel:
	
	0x06 : mailto:
	
	0x1D : file://
	
	0x24...0xFF : reserved for futur uses


* *Texte* : one octet for encoding (UTF8 =0, UTF16 = 1) and one for language
* *SmartPoster* New Ndef with the URI

[NOTES]
====
Le payload Varie en fonction du WKT

Pour les Uris : il y en a 35 !

SmartPoster contient dans son payload le nouvel enregistrement et les données annexes

====

== Standards
=== External types

You could define your own types ! 
[NOTES]
====
Filtrer le message et donc ouvrir le message à partir d’une application précise
====

//    _    _    _____               _____   ______    _____ 
//   | |  | |  / ____|     /\      / ____| |  ____|  / ____|
//   | |  | | | (___      /  \    | |  __  | |__    | (___  
//   | |  | |  \___ \    / /\ \   | | |_ | |  __|    \___ \ 
//   | |__| |  ____) |  / ____ \  | |__| | | |____   ____) |
//    \____/  |_____/  /_/    \_\  \_____| |______| |_____/ 
//                                                          
//     

[role="intro"]
== Uses

image::images/google-wallet-logo.jpg[role="icone"]

== Uses
=== Read mode

++++++
<br>
++++++

image::images/social-nfc-tags.png[width="250px"]

image::images/recharge_nfc.jpg[width="250px"]

image::images/foursquare-nfc.png[width="250px"]

[NOTES]
====
Infos complementaires sur des produits  /////// GEOLOC /////// URLS

Codes promos //////	Dématérialisation de cartes
====

== Uses
=== P2P

image::images/nfc_beam.jpg[width="450px", role="middle"]

[NOTES]
====
Echange de contacts ///// 	Echange de fichiers //////	Configuration bluetooth
====

== Uses
=== Card emulation : not avaibla nativly with Android
	
image::images/cityzi_transport.jpg[width="400px"]

image::images/google-wallet.jpg[width="400px"]


[NOTES]
====
Paiement securise 	

Authentification sur des reseaux securise
====


//    _____    ______   __  __    ____  
//   |  __ \  |  ____| |  \/  |  / __ \ 
//   | |  | | | |__    | \  / | | |  | |
//   | |  | | |  __|   | |\/| | | |  | |
//   | |__| | | |____  | |  | | | |__| |
//   |_____/  |______| |_|  |_|  \____/ 
//                                      
//         

[role="intro"]
== Demo

image::images/nfc_demo.png[role="icone"]

//    _____   __  __   _____    _        ______   __  __   ______   _   _   _______              _______   _____    ____    _   _ 
//   |_   _| |  \/  | |  __ \  | |      |  ____| |  \/  | |  ____| | \ | | |__   __|     /\     |__   __| |_   _|  / __ \  | \ | |
//     | |   | \  / | | |__) | | |      | |__    | \  / | | |__    |  \| |    | |       /  \       | |      | |   | |  | | |  \| |
//     | |   | |\/| | |  ___/  | |      |  __|   | |\/| | |  __|   | . ` |    | |      / /\ \      | |      | |   | |  | | | . ` |
//    _| |_  | |  | | | |      | |____  | |____  | |  | | | |____  | |\  |    | |     / ____ \     | |     _| |_  | |__| | | |\  |
//   |_____| |_|  |_| |_|      |______| |______| |_|  |_| |______| |_| \_|    |_|    /_/    \_\    |_|    |_____|  \____/  |_| \_|
//                                                                                                                                
//        

[role="intro"]
== Implementation

image::images/android_nfc.png[role="icone"]

== Implementation
=== How do we code that ?

	Since 2010 : Read / Write tags
	
	Depuis 2011 : Beam
	
	Depuis 2012 : Share medias


image::images/nfc_tag_dispatch.png[role="middle"]


[NOTES]
====
IL n'y a pas que le NDEF de reconnu ! 

Message transformé en Intent
====


== Implementation
=== Configuration
*AndroidManifest.xml*

++++++
<br>
++++++
Add permission
[syntax="xml"]
----
<uses-permission android:name="android.permission.NFC"/>
----
++++++
<br>
++++++
Add feature use (only phones with NFC chip)
[syntax="xml"]
----
<uses-feature android:required="true" android:name="android.hardware.nfc"/>
----
++++++
<br>
++++++
Specify the min Sdk version
[syntax="xml"]
----
<uses-sdk android:minSdkVersion="10" />
----

== Implementation
=== Tag reception
*We could filters tag according*

++++++
<br>
++++++
	Technology
	Mime Type
++++++
<br>
++++++
[syntax="xml"]
----
<uses-permission android:name="android.permission.NFC"/>
<intent-filter>
	<action android:name="android.nfc.action.NDEF_DISCOVERED"/>
	<category android:name="android.intent.category.DEFAULT"/>
	<data android:scheme="http" android:host="sqli.com"/>
</intent-filter>
----

== Implementation
=== Tags reception
*Intercept and dispatch*
++++++
<br>
++++++
[syntax="java"]
----
@Override
protected void onCreate(Bundle savedInstanceState) {
	…
	mAdapter = NfcAdapter.getDefaultAdapter(this);
	resoudreIntent(getIntent());
}

@Override
protected void onResume() {
	super.onResume();
	…
	mAdapter.enableForegroundDispatch(this, pendingIntent, filters, techs);
}

@Override
protected void onPause() {
	…
	mAdapter.disableForegroundDispatch(this);
	super.onPause();
}
----

== Implementation
=== Read a tag
*We read information from Intent*
++++++
<br>
++++++
[syntax="java"]
----
private void resoudreIntent(Intent intent) {
	String action = intent.getAction();
	if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)) {
		Parcelable[] rawMsgs = intent.getParcelableArrayExtra(
			NfcAdapter.EXTRA_NDEF_MESSAGES);
		NdefMessage[] messages;
		NdefRecord record = null;
		if (rawMsgs != null) {
			messages = new NdefMessage[rawMsgs.length];
			for (int i = 0; i < rawMsgs.length; i++) {
				messages[i] = (NdefMessage) rawMsgs[i];
				for (int j = 0; j < messages[i].getRecords().length; j++) {
					record = messages[i].getRecords()[j];
					…
				}
			}
		}
	}
}
----

== Implementation
=== Tag write
*You have to create a NDefMessage*
++++++
<br>
++++++
[syntax="java"]
----
String uri = "sqli.com";
byte[] uriField = uri.getBytes();
byte[] payload = new byte[uriField.length + 1];
payload[0] = 0x03;
System.arraycopy(uriField, 0, payload, 1, uriField.length);
NdefRecord record = new NdefRecord(NdefRecord.TNF_WELL_KNOWN, 
		NdefRecord.RTD_URI, 
		new byte[0], 
		payload);
NdefMessage msg = new NdefMessage(new NdefRecord[]{record});
----

== Implementation
=== Write tag
*Then you will write on a tag (when it is detected : Intent)*
++++++
<br>
++++++
[syntax="java"]
----
private void writeTag(Intent intent) {
	Tag tag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
	final Ndef ndef = Ndef.get(tag);
	AsyncTask<Void, Void, String> taskWrite = new AsyncTask<Void, Void, String>() {
		@Override
		protected String doInBackground(Void... params) {
			try {
				ndef.connect();
				try {
				ndef.writeNdefMessage(getMessage());
				} catch (FormatException e) {}
			ndef.close();
			} catch (IOException e) {}
		}
	};
	taskWrite.execute();
}
----

== Implementation
=== BEAM
*Override the manifest.xml*
++++++
<br>
++++++
[syntax="xml"]
----
<meta-data
	android:name="android.nfc.disable_beam_default"
	android:value="true" />
----

++++++
<br>
++++++
*Then specify that you write like for tag but for a precise intetn*
++++++
<br>
++++++
[syntax="java"]
----
mAdapter.setNdefPushMessageCallback(this, this);
----

//    _   _   ______            
//   | \ | | |  ____|     /\    
//   |  \| | | |__       /  \   
//   | . ` | |  __|     / /\ \  
//   | |\  | | |       / ____ \ 
//   |_| \_| |_|      /_/    \_\
//                              
//   

[role="intro"]
== NFA
=== Nfc For Android

image::images/nfa.png[role="icone"]

== Why ?

*NFC & Android = byte[] !*


	How to write "Hello World"

++++++
<br>
++++++
[syntax="java"]
----
		byte[] languageData = "en".getBytes();
		
		byte[] textData = "Hello World".getBytes(record.getEncoding());
		byte[] payload = new byte[1 + languageData.length + textData.length];

		byte status = (byte) 0x00;
		payload[0] = status;
		System.arraycopy(languageData, 0, payload, 1, languageData.length);
		System.arraycopy(textData, 0, payload, 1 + languageData.length
					, textData.length);

		NdefRecord ndefRecord = new NdefRecord(NdefRecord.TNF_WELL_KNOWN
					, NdefRecord.RTD_TEXT
					, record.getId()
					, payload);
----

== Why ? 

image::images/meme_rock.jpg[role="stretch-y middle"]

[NOTES]
====
Simplifier l'écriture. Si le nfc doit percer, il faut l'aider
====

== Targets

[{stepwise}]
* Non inherit base library
* Lightweight
* Helpers ! 
* Less code

[NOTES]
====
Parler du problème fréquent avec le multi héritage mais dire que ça sera dispo
====

== Targets

image::images/meme_challenge.jpg[role="stretch-y middle"]


== Implementation
=== Initialisation

*Android*
[syntax="java"]
----
// We register the default Nfc Adapter
mAdapter = NfcAdapter.getDefaultAdapter(activity);
// We register the curent activity to a the filters we wants
PendingIntent pendingIntent = PendingIntent.getActivity(activity, 0
	, new Intent(activity, activity.getClass())
		.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);

int length = filters != null && filters.length > 0 ? filters.length : 1;
IntentFilter[] intentFilters = new IntentFilter[length];
IntentFilter ndefFilter = new IntentFilter(filter.getAction());
pendingIntentArray.put(activity.getTaskId(), pendingIntent);		
----

*NfA*
[syntax="java"]
----
// We register our activity to the NFA Manager
NFA_MANAGER.register(activity //
		, NDEF_FILTER //				
		);
----

== Implementation
=== Read - Android

[syntax="java"]
----
byte[] payload = ndefRecord.getPayload();
ByteArrayInputStream bais = new ByteArrayInputStream(payload);
int status = bais.read();
byte languageCodeLength = (byte) (status & TextRecord.LANGUAGE_CODE_MASK);
byte[] bytes = new byte[languageCodeLength];
bais.read(bytes, 0, bytes.length);
String languageCode = new String(bytes);
bytes = new byte[payload.length - languageCodeLength - 1];
bais.read(bytes, 0, bytes.length);
byte[] textData = bytes;
Charset textEncoding = ((status & 0x80) != 0) ? TextRecord.UTF16 
			: TextRecord.UTF8;
String message = null;
try {
	message = new String(textData, textEncoding.name());
} catch (UnsupportedEncodingException e) {
	throw new RuntimeException(e);
}
----

== Implementation
=== Read - NfA

[syntax="java"]
----
NfaRecieveBeanBuilder<TextRecord> builder = recieveBeanConfigure(); //
builder //
.activity(activity) //
.intent(intent) //
.intentRecieveRecord(new INfaIntentRecieveRecord<TextRecord>() {

	@Override
	public void recieveRecord(TextRecord record) {
		String message = record.getText();

	}
}) // INfaIntentRecieveRecord
.parser(TEXT_PARSER); //
NFA_MANAGER.manageIntent(builder.build());
----

== Implementation
=== Write

*Android*
[syntax="java"]
----
byte[] languageData = "en".getBytes();
byte[] textData = "Hello World".getBytes(record.getEncoding());
byte[] payload = new byte[1 + languageData.length + textData.length];
byte status = (byte) (0x00);
payload[0] = status;
System.arraycopy(languageData, 0, payload, 1, languageData.length);
System.arraycopy(textData, 0, payload, 1 + languageData.length
		, textData.length);

NdefRecord ndefRecord = new NdefRecord(NdefRecord.TNF_WELL_KNOWN
		, NdefRecord.RTD_TEXT, record.getId(), payload);
----

*NfA*
[syntax="java"]
----
NFA_MANAGER.writeTag(getApplicationContext(), //
		intent, // 
		activity, // 
		false, // addAndroidApplicationRecord
		NfaWriteBean.writeBeanConfigure() //
				.writer(TEXT_WRITER) //
				.record(NfaRecordFactory.wellKnowTypeFactory()//
					.textRecordInstance("Hello World")) //
				.build());
----

// présenter le gain de code

== RoadMap

// Parler de ce qui viendra :)
* 0.8.0
	
	More Writers / Parsers / Filters / Records

	Signature Record
	
	SmartPoster more rich

	Unit tests :P

* 0.9.0

	Handover Record

	Cryptography module

	Add some abstract class

* 1.0.0

	Code optimisation

	bugs fix

	your contribution ;)

== Summary

image::images/nfa.png[role="float-left"]


Available with maven on Oss Sonatype : http://goo.gl/NAQwd

++++++
<br>
<br>
++++++

Open source on github : https://github.com/organizations/NfcForAndroid[Github]

++++++
<br>
++++++

Thank you to https://github.com/grundid/nfctools[NfcTools] and http://code.google.com/p/ndef-tools-for-android/[Ndef tools for Android]

++++++
<br>
++++++

Sample available here : https://play.google.com/store/apps/details?id=com.github.nfcforandroid.samples[Play Store]

== Summary

image::images/meme_baby_win.jpg[role="stretch-y middle"]


//     _____    ____    _   _    _____   _        _    _    _____   _____    ____    _   _ 
//    / ____|  / __ \  | \ | |  / ____| | |      | |  | |  / ____| |_   _|  / __ \  | \ | |
//   | |      | |  | | |  \| | | |      | |      | |  | | | (___     | |   | |  | | |  \| |
//   | |      | |  | | | . ` | | |      | |      | |  | |  \___ \    | |   | |  | | | . ` |
//   | |____  | |__| | | |\  | | |____  | |____  | |__| |  ____) |  _| |_  | |__| | | |\  |
//    \_____|  \____/  |_| \_|  \_____| |______|  \____/  |_____/  |_____|  \____/  |_| \_|
//                                                                                         
//

[role="intro"]
== Conclusion

image::images/nfc_logo.jpg[role="icone"]

== Conclusion

* The technology is pretty recent but already lots of possibilities
* The secure aspect could be a problem some times
* Easy to implmenet (even easier with Nfc For Android ;) )
* Cheap technology (<1€ / tag)



//    _        _____   ______   _   _    _____ 
//   | |      |_   _| |  ____| | \ | |  / ____|
//   | |        | |   | |__    |  \| | | (___  
//   | |        | |   |  __|   | . ` |  \___ \ 
//   | |____   _| |_  | |____  | |\  |  ____) |
//   |______| |_____| |______| |_| \_| |_____/ 
//                                             
//   

[role="intro"]
== Links

image::images/link.png[role="icone"]

// Revoir la disposition : + ajout du lien de la presentation

== Links

*  http://goo.gl/lFuCJ[http://goo.gl/lFuCJ] The presentation

* http://www.nfc-forum.org/specs/spec_list/[NFC Forum specifications]

* http://d.android.com/guide/topics/nfc/index.html[Android NFC API]

* http://d.android.com/reference/android/nfc/package-summary.html[Android Javadoc]

* http://rapidnfc.com/[Buy tags]

* http://nfctags.tagstand.com/collections/nfc-reader-writers/products/mini-usb-nfc-reader-writer-acr122t[Reader]

* https://github.com/organizations/NfcForAndroid[Nfc For Android project]

* https://github.com/organizations/binomed[Github Jean-François]


//     ____    _    _   ______    _____   _______   _____    ____    _   _    _____ 
//    / __ \  | |  | | |  ____|  / ____| |__   __| |_   _|  / __ \  | \ | |  / ____|
//   | |  | | | |  | | | |__    | (___      | |      | |   | |  | | |  \| | | (___  
//   | |  | | | |  | | |  __|    \___ \     | |      | |   | |  | | | . ` |  \___ \ 
//   | |__| | | |__| | | |____   ____) |    | |     _| |_  | |__| | | |\  |  ____) |
//    \___\_\  \____/  |______| |_____/     |_|    |_____|  \____/  |_| \_| |_____/ 
//                                                                                  
//   

[role="intro fond_fin"]
== Questions

image::images/andquestionsag.jpg[role="icone"]
